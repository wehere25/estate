rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Define a debug flag - true for development environments
    function isDebugMode() {
      return false; // Set to false for production mode
    }
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Enhanced admin check with multiple ways to identify admins
    function isAdmin() {
      return isAuthenticated() && (
        // Check for admin claim in token
        request.auth.token.admin == true || 
        
        // Check if user's document exists in the admin_users collection
        exists(/databases/$(database)/documents/admin_users/$(request.auth.uid)) ||
        
        // Check if user has admin role in their user document
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin") ||
        
        // Hardcoded admin emails for emergency access
        request.auth.token.email in ['admin@example.com', 'youremail@example.com', 'your.admin@example.com'] ||
         
        // In debug mode, allow specific test accounts
        (isDebugMode() && (
          request.auth.uid == "test-admin-user" ||
          request.auth.token.email_verified == true // Allow any verified user in debug mode
        ))
      );
    }
    
    // Special debug admin check for development only
    function isDebugAdmin() {
      // Only applies if debug mode is enabled - more permissive for testing
      return isDebugMode() && isAuthenticated();
    }
    
    // Relaxed App Check validation for development
    function hasValidAppCheck() {
      // In debug mode, skip app check validation entirely
      return isDebugMode() || request.auth.token.app_check == true;
    }
    
    // Users collection rules
    match /users/{userId} {
      // Read: Users can read their own document, admins can read any
      allow read: if isAuthenticated() && 
        (request.auth.uid == userId || isAdmin() || isDebugAdmin());
        
      // Write: Users can write to their own document, admins can write to any
      allow write: if isAuthenticated() && 
        (request.auth.uid == userId || isAdmin() || isDebugAdmin());
    }
    
    // Admin logs collection - only accessible by admins
    match /admin_logs/{logId} {
      allow read: if isAdmin() || isDebugAdmin();
      allow write: if isAdmin() || isDebugAdmin();
    }
    
    // Admin access logs collection - for debugging permission issues
    match /admin_access_logs/{logId} {
      // Always allow writing to this collection for debugging purposes
      allow read, write: if isDebugMode() && isAuthenticated();
    }
    
    // Admin users collection - list of admin users
    match /admin_users/{userId} {
      // Anyone can read the admin list to check if a user is admin
      allow read: if isAuthenticated();
      
      // Special rule for development: users can add themselves as admin for testing
      allow create, update: if isDebugMode() && isAuthenticated() && 
        request.auth.uid == userId;
        
      // Only super admins can modify other admin users in production
      allow write: if isAdmin();
    }
    
    // Main admins collection - alternative to admin_users for admin permission checks
    match /admins/{userId} {
      // Anyone can read to check if a user is admin
      allow read: if isAuthenticated();
      
      // Only admins can modify the admins collection in production
      allow write: if isAdmin();
      
      // Emergency rule for adding yourself if your email is in the hardcoded list
      allow create: if isAuthenticated() && 
        request.auth.uid == userId &&
        request.auth.token.email in ['admin@example.com', 'youremail@example.com', 'your.admin@example.com'];
    }
    
    // Admin settings collection
    match /admin_settings/{settingId} {
      // More permissive in debug mode
      allow read: if isAdmin() || isDebugAdmin();
      allow write: if isAdmin() || (isDebugMode() && isAuthenticated());
    }
    
    // Property collection - public for reading, restricted for writing
    match /properties/{propertyId} {
      // Anyone can read properties
      allow read: if true;
      
      // Write permissions: property owner or admin
      allow create: if isAuthenticated() && 
        (request.resource.data.ownerId == request.auth.uid || isAdmin() || isDebugAdmin());
        
      allow update, delete: if isAuthenticated() && 
        (resource.data.ownerId == request.auth.uid || isAdmin() || isDebugAdmin());
    }
    
    // Property reviews subcollection
    match /properties/{propertyId}/reviews/{reviewId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin() || isDebugAdmin());
    }
    
    // Property messages subcollection
    match /properties/{propertyId}/messages/{messageId} {
      allow read: if isAuthenticated() && 
        (resource.data.senderId == request.auth.uid || 
         resource.data.receiverId == request.auth.uid || 
         isAdmin() || 
         isDebugAdmin());
         
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        (resource.data.senderId == request.auth.uid || isAdmin() || isDebugAdmin());
    }
    
    // Stats collection for analytics
    match /stats/{statId} {
      allow read: if isAdmin() || isDebugAdmin();
      allow write: if isAdmin() || isDebugAdmin();
    }
    
    // Debug-only collections for testing
    match /debug_data/{docId} {
      allow read, write: if isDebugMode() && isAuthenticated();
    }
    
    // Debug admin logs for troubleshooting permission issues
    match /debug_admin_logs/{logId} {
      allow read, write: if isDebugMode() && isAuthenticated();
    }
    
    // Notifications collection rules
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}